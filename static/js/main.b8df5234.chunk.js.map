{"version":3,"sources":["Layout.js","App.js","serviceWorker.js","index.js"],"names":["Layout","state","img","flip","head","tail","handleClick","num","Math","floor","random","console","log","newCoin","props","coins","setState","side","this","src","imgSrc","alt","onClick","Component","defaultProps","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PACMA,E,2MAcLC,MAAQ,CACPC,IAAK,KACLC,KAAM,EACNC,KAAM,EACNC,KAAM,G,EAGPC,YAAc,WACb,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,IAClDE,QAAQC,IAAIL,GACZ,IAAMM,EAAU,EAAKC,MAAMC,MAAMR,GACjCI,QAAQC,IAAIC,GACZ,EAAKG,SAAS,CACbd,IAAKW,EACLV,KAAM,EAAKF,MAAME,KAAO,EACxBC,KAAM,EAAKH,MAAMG,MAAyB,SAAjBS,EAAQI,KAAkB,EAAI,GACvDZ,KAAM,EAAKJ,MAAMI,MAAyB,SAAjBQ,EAAQI,KAAkB,EAAI,M,wEAIxD,OACC,6BACC,iDACCC,KAAKjB,MAAMC,KAAO,yBAAKiB,IAAKD,KAAKjB,MAAMC,IAAIkB,OAAQC,IAAKH,KAAKjB,MAAMC,IAAIe,OACxE,6BACA,4BAAQK,QAASJ,KAAKZ,aAAtB,aACA,sCACSY,KAAKjB,MAAME,KADpB,2BACkDe,KAAKjB,MAAMG,KAD7D,cAC8Ec,KAAKjB,MAAMI,KADzF,e,GAxCiBkB,aAAfvB,EACEwB,aAAe,CACrBT,MAAO,CACN,CACCE,KAAM,OACNG,OAAQ,qFAET,CACCH,KAAM,OACNG,OAAQ,uFAuCGpB,QCrCAyB,MARf,WACC,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8df5234.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Layout extends Component {\n\tstatic defaultProps = {\n\t\tcoins: [\n\t\t\t{\n\t\t\t\tside: 'head',\n\t\t\t\timgSrc: 'https://bjc.edc.org/June2017/bjc-r/img/5-algorithms/img_flipping-a-coin/Heads.png'\n\t\t\t},\n\t\t\t{\n\t\t\t\tside: 'tail',\n\t\t\t\timgSrc: 'https://bjc.edc.org/June2017/bjc-r/img/5-algorithms/img_flipping-a-coin/Tails.png'\n\t\t\t}\n\t\t]\n\t};\n\n\tstate = {\n\t\timg: null,\n\t\tflip: 0,\n\t\thead: 0,\n\t\ttail: 0\n\t};\n\n\thandleClick = () => {\n\t\tconst num = Math.floor(Math.random() * Math.floor(2));\n\t\tconsole.log(num);\n\t\tconst newCoin = this.props.coins[num];\n\t\tconsole.log(newCoin);\n\t\tthis.setState({\n\t\t\timg: newCoin,\n\t\t\tflip: this.state.flip + 1,\n\t\t\thead: this.state.head + (newCoin.side === 'head' ? 1 : 0),\n\t\t\ttail: this.state.tail + (newCoin.side === 'tail' ? 1 : 0)\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Let's flip a coin</h1>\n\t\t\t\t{this.state.img && <img src={this.state.img.imgSrc} alt={this.state.img.side} />}\n\t\t\t\t<br />\n\t\t\t\t<button onClick={this.handleClick}>Flip Me! </button>\n\t\t\t\t<h2>\n\t\t\t\t\tOut of {this.state.flip} flips, there have been {this.state.head} heads and {this.state.tail} tails\n\t\t\t\t</h2>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Layout;\n","import React from 'react';\nimport './App.css';\nimport Layout from './Layout';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}